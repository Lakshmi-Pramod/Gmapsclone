{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\megha\\\\OneDrive\\\\Documents\\\\GitHub\\\\Gmapsclone\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Polyline, Marker } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"5b3ce3597851110001cf6248b9aa70610e5d4dcaae9d9ef7ea9871d1\"; // Replace with your API Key\n\n// Predefined important locations in Coimbatore\nconst locations = {\n  \"Coimbatore Airport\": [11.0292, 77.0438],\n  \"Brookefields Mall\": [11.0150, 76.9702],\n  \"Gandhipuram Bus Stand\": [11.0183, 76.9709],\n  \"Coimbatore Railway Station\": [11.0001, 76.9642],\n  \"PSG College of Technology\": [11.0296, 77.0020],\n  \"Tidel Park Coimbatore\": [11.0336, 77.0387]\n};\nconst App = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  const [destination, setDestination] = useState(\"\");\n  const [route, setRoute] = useState([]);\n  const [error, setError] = useState(\"\");\n\n  // Get User's Current Location\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setUserLocation([position.coords.latitude, position.coords.longitude]);\n    }, error => {\n      console.error(\"Error getting location:\", error);\n      setError(\"Location access denied. Enter a destination manually.\");\n    });\n  }, []);\n\n  // Get Coordinates (Using Predefined Locations or API)\n  const getCoordinates = async location => {\n    if (locations[location]) {\n      return locations[location]; // Use predefined coordinates\n    }\n    try {\n      const response = await fetch(`https://api.openrouteservice.org/geocode/search?api_key=${API_KEY}&text=${encodeURIComponent(location)}`);\n      if (!response.ok) throw new Error(`Geocoding API Error: ${response.statusText}`);\n      const data = await response.json();\n      if (!data.features.length) {\n        alert(\"Invalid location. Try again.\");\n        return null;\n      }\n      return data.features[0].geometry.coordinates.reverse();\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n      alert(\"Failed to fetch coordinates.\");\n      return null;\n    }\n  };\n\n  // Fetch Route\n  const fetchRoute = async (start, end) => {\n    try {\n      const response = await fetch(\"https://api.openrouteservice.org/v2/directions/driving-car/geojson\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": API_KEY\n        },\n        body: JSON.stringify({\n          coordinates: [start, end]\n        })\n      });\n      if (!response.ok) throw new Error(`Routing API Error: ${response.statusText}`);\n      const data = await response.json();\n      if (!data.features.length) {\n        alert(\"No route found.\");\n        return [];\n      }\n      return data.features[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);\n    } catch (error) {\n      console.error(\"Error fetching route:\", error);\n      alert(\"Failed to fetch route.\");\n      return [];\n    }\n  };\n\n  // Handle Search Button Click\n  const handleSearch = async () => {\n    if (!userLocation) {\n      alert(\"Waiting for location...\");\n      return;\n    }\n    const destinationCoords = await getCoordinates(destination);\n    if (!destinationCoords) return;\n    const routeData = await fetchRoute(userLocation, destinationCoords);\n    setRoute(routeData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Google Maps Clone (Using OpenRouteService)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        list: \"places\",\n        placeholder: \"Enter destination...\",\n        value: destination,\n        onChange: e => setDestination(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n        id: \"places\",\n        children: Object.keys(locations).map(place => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: place\n        }, place, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search Route\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this), userLocation && /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: userLocation,\n      zoom: 14,\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: userLocation,\n        icon: L.icon({\n          iconUrl: \"https://leafletjs.com/examples/custom-icons/leaf-red.png\",\n          iconSize: [25, 41]\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), route.length > 0 && /*#__PURE__*/_jsxDEV(Marker, {\n        position: route[route.length - 1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 32\n      }, this), route.length > 0 && /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: route,\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"R0F67aHxTToKgzg7uzhxjJCRMqc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Polyline","Marker","L","jsxDEV","_jsxDEV","API_KEY","locations","App","_s","userLocation","setUserLocation","destination","setDestination","route","setRoute","error","setError","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","getCoordinates","location","response","fetch","encodeURIComponent","ok","Error","statusText","data","json","features","length","alert","geometry","coordinates","reverse","fetchRoute","start","end","method","headers","body","JSON","stringify","map","coord","handleSearch","destinationCoords","routeData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","list","placeholder","value","onChange","e","target","id","Object","keys","place","onClick","center","zoom","url","icon","iconUrl","iconSize","positions","color","_c","$RefreshReg$"],"sources":["C:/Users/megha/OneDrive/Documents/GitHub/Gmapsclone/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, Polyline, Marker } from \"react-leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\n\r\nconst API_KEY = \"5b3ce3597851110001cf6248b9aa70610e5d4dcaae9d9ef7ea9871d1\"; // Replace with your API Key\r\n\r\n// Predefined important locations in Coimbatore\r\nconst locations = {\r\n  \"Coimbatore Airport\": [11.0292, 77.0438],\r\n  \"Brookefields Mall\": [11.0150, 76.9702],\r\n  \"Gandhipuram Bus Stand\": [11.0183, 76.9709],\r\n  \"Coimbatore Railway Station\": [11.0001, 76.9642],\r\n  \"PSG College of Technology\": [11.0296, 77.0020],\r\n  \"Tidel Park Coimbatore\": [11.0336, 77.0387],\r\n};\r\n\r\nconst App = () => {\r\n  const [userLocation, setUserLocation] = useState(null);\r\n  const [destination, setDestination] = useState(\"\");\r\n  const [route, setRoute] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  // Get User's Current Location\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        setUserLocation([position.coords.latitude, position.coords.longitude]);\r\n      },\r\n      (error) => {\r\n        console.error(\"Error getting location:\", error);\r\n        setError(\"Location access denied. Enter a destination manually.\");\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  // Get Coordinates (Using Predefined Locations or API)\r\n  const getCoordinates = async (location) => {\r\n    if (locations[location]) {\r\n      return locations[location]; // Use predefined coordinates\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.openrouteservice.org/geocode/search?api_key=${API_KEY}&text=${encodeURIComponent(location)}`\r\n      );\r\n\r\n      if (!response.ok) throw new Error(`Geocoding API Error: ${response.statusText}`);\r\n\r\n      const data = await response.json();\r\n      if (!data.features.length) {\r\n        alert(\"Invalid location. Try again.\");\r\n        return null;\r\n      }\r\n\r\n      return data.features[0].geometry.coordinates.reverse();\r\n    } catch (error) {\r\n      console.error(\"Error fetching coordinates:\", error);\r\n      alert(\"Failed to fetch coordinates.\");\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Fetch Route\r\n  const fetchRoute = async (start, end) => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://api.openrouteservice.org/v2/directions/driving-car/geojson\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": API_KEY,\r\n          },\r\n          body: JSON.stringify({ coordinates: [start, end] }),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) throw new Error(`Routing API Error: ${response.statusText}`);\r\n\r\n      const data = await response.json();\r\n      if (!data.features.length) {\r\n        alert(\"No route found.\");\r\n        return [];\r\n      }\r\n\r\n      return data.features[0].geometry.coordinates.map((coord) => [coord[1], coord[0]]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching route:\", error);\r\n      alert(\"Failed to fetch route.\");\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // Handle Search Button Click\r\n  const handleSearch = async () => {\r\n    if (!userLocation) {\r\n      alert(\"Waiting for location...\");\r\n      return;\r\n    }\r\n\r\n    const destinationCoords = await getCoordinates(destination);\r\n    if (!destinationCoords) return;\r\n\r\n    const routeData = await fetchRoute(userLocation, destinationCoords);\r\n    setRoute(routeData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h1>Google Maps Clone (Using OpenRouteService)</h1>\r\n\r\n      <div className=\"search-container\">\r\n        <input\r\n          type=\"text\"\r\n          list=\"places\"\r\n          placeholder=\"Enter destination...\"\r\n          value={destination}\r\n          onChange={(e) => setDestination(e.target.value)}\r\n        />\r\n        <datalist id=\"places\">\r\n          {Object.keys(locations).map((place) => (\r\n            <option key={place} value={place} />\r\n          ))}\r\n        </datalist>\r\n        <button onClick={handleSearch}>Search Route</button>\r\n      </div>\r\n\r\n      {error && <p className=\"error\">{error}</p>}\r\n\r\n      {userLocation && (\r\n        <MapContainer center={userLocation} zoom={14} className=\"map-container\">\r\n          <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n\r\n          {/* User's Location Marker */}\r\n          <Marker position={userLocation} icon={L.icon({ iconUrl: \"https://leafletjs.com/examples/custom-icons/leaf-red.png\", iconSize: [25, 41] })} />\r\n\r\n          {/* Destination Marker */}\r\n          {route.length > 0 && <Marker position={route[route.length - 1]} />}\r\n\r\n          {/* Route Line (Red) */}\r\n          {route.length > 0 && <Polyline positions={route} color=\"red\" />}\r\n        </MapContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}