{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\megha\\\\OneDrive\\\\Documents\\\\GitHub\\\\Gmapsclone\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [map, setMap] = useState(null);\n  const [routeLayer, setRouteLayer] = useState(null);\n  const [destination, setDestination] = useState(\"\");\n  const [userLocation, setUserLocation] = useState(null);\n  useEffect(() => {\n    // Initialize the map\n    const newMap = L.map(\"map\").setView([10.9033, 76.9025], 13);\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\").addTo(newMap);\n    setMap(newMap);\n\n    // Get user's location\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setUserLocation([latitude, longitude]);\n      L.marker([latitude, longitude]).addTo(newMap).bindPopup(\"Your Location\").openPopup();\n    }, () => alert(\"Failed to get your location\"));\n    return () => newMap.remove();\n  }, []);\n  const fetchRoute = async (start, end) => {\n    try {\n      const response = await fetch(\"http://localhost:5000/route\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          coordinates: [start, end]\n        })\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch route from backend\");\n      const data = await response.json();\n      if (!data.features || data.features.length === 0) {\n        alert(\"No route found.\");\n        return [];\n      }\n      return data.features[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);\n    } catch (error) {\n      console.error(\"Error fetching route:\", error);\n      alert(\"Failed to fetch route.\");\n      return [];\n    }\n  };\n  const handleSearch = async () => {\n    if (!userLocation || !destination) return alert(\"Enter a valid destination\");\n    try {\n      const geoResponse = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${destination}`);\n      const geoData = await geoResponse.json();\n      if (!geoData.length) return alert(\"Location not found.\");\n      const destinationCoords = [parseFloat(geoData[0].lat), parseFloat(geoData[0].lon)];\n      const routeCoords = await fetchRoute(userLocation, destinationCoords);\n      if (routeCoords.length > 0) {\n        if (routeLayer) map.removeLayer(routeLayer);\n        const newRouteLayer = L.polyline(routeCoords, {\n          color: \"red\",\n          weight: 4\n        }).addTo(map);\n        setRouteLayer(newRouteLayer);\n        map.fitBounds(newRouteLayer.getBounds());\n      }\n    } catch (error) {\n      console.error(\"Error searching location:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Google Maps Clone (Using OpenRouteService)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter destination...\",\n      value: destination,\n      onChange: e => setDestination(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search Route\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"500px\",\n        marginTop: \"20px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"8QF+BQuKG3E1hiffXzugI91chkA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","L","jsxDEV","_jsxDEV","App","_s","map","setMap","routeLayer","setRouteLayer","destination","setDestination","userLocation","setUserLocation","newMap","setView","tileLayer","addTo","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","marker","bindPopup","openPopup","alert","remove","fetchRoute","start","end","response","fetch","method","headers","body","JSON","stringify","coordinates","ok","Error","data","json","features","length","geometry","coord","error","console","handleSearch","geoResponse","geoData","destinationCoords","parseFloat","lat","lon","routeCoords","removeLayer","newRouteLayer","polyline","color","weight","fitBounds","getBounds","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","id","style","height","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/megha/OneDrive/Documents/GitHub/Gmapsclone/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nconst App = () => {\r\n  const [map, setMap] = useState(null);\r\n  const [routeLayer, setRouteLayer] = useState(null);\r\n  const [destination, setDestination] = useState(\"\");\r\n  const [userLocation, setUserLocation] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize the map\r\n    const newMap = L.map(\"map\").setView([10.9033, 76.9025], 13);\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\").addTo(newMap);\r\n    setMap(newMap);\r\n\r\n    // Get user's location\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        setUserLocation([latitude, longitude]);\r\n        L.marker([latitude, longitude]).addTo(newMap).bindPopup(\"Your Location\").openPopup();\r\n      },\r\n      () => alert(\"Failed to get your location\")\r\n    );\r\n\r\n    return () => newMap.remove();\r\n  }, []);\r\n\r\n  const fetchRoute = async (start, end) => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/route\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ coordinates: [start, end] }),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(\"Failed to fetch route from backend\");\r\n\r\n      const data = await response.json();\r\n      if (!data.features || data.features.length === 0) {\r\n        alert(\"No route found.\");\r\n        return [];\r\n      }\r\n\r\n      return data.features[0].geometry.coordinates.map((coord) => [coord[1], coord[0]]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching route:\", error);\r\n      alert(\"Failed to fetch route.\");\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!userLocation || !destination) return alert(\"Enter a valid destination\");\r\n\r\n    try {\r\n      const geoResponse = await fetch(\r\n        `https://nominatim.openstreetmap.org/search?format=json&q=${destination}`\r\n      );\r\n      const geoData = await geoResponse.json();\r\n\r\n      if (!geoData.length) return alert(\"Location not found.\");\r\n\r\n      const destinationCoords = [parseFloat(geoData[0].lat), parseFloat(geoData[0].lon)];\r\n      const routeCoords = await fetchRoute(userLocation, destinationCoords);\r\n\r\n      if (routeCoords.length > 0) {\r\n        if (routeLayer) map.removeLayer(routeLayer);\r\n\r\n        const newRouteLayer = L.polyline(routeCoords, { color: \"red\", weight: 4 }).addTo(map);\r\n        setRouteLayer(newRouteLayer);\r\n\r\n        map.fitBounds(newRouteLayer.getBounds());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error searching location:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Google Maps Clone (Using OpenRouteService)</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter destination...\"\r\n        value={destination}\r\n        onChange={(e) => setDestination(e.target.value)}\r\n      />\r\n      <button onClick={handleSearch}>Search Route</button>\r\n      <div id=\"map\" style={{ height: \"500px\", marginTop: \"20px\" }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}