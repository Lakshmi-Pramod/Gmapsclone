{"ast":null,"code":"const handleSearch = async () => {\n  if (!destination || !userLocation) return;\n  const apiKey = \"5b3ce3597851110001cf6248b9aa70610e5d4dcaae9d9ef7ea9871d1\"; // ðŸ”´ Replace with your API Key\n\n  // Step 1: Convert place name to coordinates using OpenRouteService Geocoding API\n  const geocodeUrl = `https://api.openrouteservice.org/geocode/search?api_key=${apiKey}&text=${encodeURIComponent(destination)}`;\n  try {\n    const geocodeResponse = await fetch(geocodeUrl);\n    const geocodeData = await geocodeResponse.json();\n    if (geocodeData.features.length === 0) {\n      alert(\"Location not found! Please enter a valid destination.\");\n      return;\n    }\n    const destLoc = geocodeData.features[0].geometry.coordinates;\n    const destLat = destLoc[1];\n    const destLng = destLoc[0];\n\n    // Add marker for the destination\n    map.addMarker({\n      lat: destLat,\n      lng: destLng,\n      title: \"Destination\"\n    });\n\n    // Step 2: Get the shortest route from userLocation to destination\n    const routeUrl = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${userLocation.lng},${userLocation.lat}&end=${destLng},${destLat}`;\n    const routeResponse = await fetch(routeUrl);\n    const routeData = await routeResponse.json();\n    if (routeData.routes.length === 0) {\n      alert(\"No route found!\");\n      return;\n    }\n\n    // Extract route coordinates\n    const routeCoords = routeData.routes[0].geometry.coordinates.map(coord => ({\n      lat: coord[1],\n      lng: coord[0]\n    }));\n\n    // Draw the route on the map\n    map.drawPolyline({\n      path: routeCoords,\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 0.8,\n      strokeWeight: 5\n    });\n  } catch (error) {\n    console.error(\"Error:\", error);\n    alert(\"Error fetching location or route. Please try again.\");\n  }\n};","map":{"version":3,"names":["handleSearch","destination","userLocation","apiKey","geocodeUrl","encodeURIComponent","geocodeResponse","fetch","geocodeData","json","features","length","alert","destLoc","geometry","coordinates","destLat","destLng","map","addMarker","lat","lng","title","routeUrl","routeResponse","routeData","routes","routeCoords","coord","drawPolyline","path","strokeColor","strokeOpacity","strokeWeight","error","console"],"sources":["C:/Users/megha/OneDrive/Documents/GitHub/Gmapsclone/frontend/src/App.js"],"sourcesContent":["const handleSearch = async () => {\r\n  if (!destination || !userLocation) return;\r\n\r\n  const apiKey = \"5b3ce3597851110001cf6248b9aa70610e5d4dcaae9d9ef7ea9871d1\"; // ðŸ”´ Replace with your API Key\r\n\r\n  // Step 1: Convert place name to coordinates using OpenRouteService Geocoding API\r\n  const geocodeUrl = `https://api.openrouteservice.org/geocode/search?api_key=${apiKey}&text=${encodeURIComponent(destination)}`;\r\n\r\n  try {\r\n      const geocodeResponse = await fetch(geocodeUrl);\r\n      const geocodeData = await geocodeResponse.json();\r\n\r\n      if (geocodeData.features.length === 0) {\r\n          alert(\"Location not found! Please enter a valid destination.\");\r\n          return;\r\n      }\r\n\r\n      const destLoc = geocodeData.features[0].geometry.coordinates;\r\n      const destLat = destLoc[1];\r\n      const destLng = destLoc[0];\r\n\r\n      // Add marker for the destination\r\n      map.addMarker({\r\n          lat: destLat,\r\n          lng: destLng,\r\n          title: \"Destination\"\r\n      });\r\n\r\n      // Step 2: Get the shortest route from userLocation to destination\r\n      const routeUrl = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${userLocation.lng},${userLocation.lat}&end=${destLng},${destLat}`;\r\n\r\n      const routeResponse = await fetch(routeUrl);\r\n      const routeData = await routeResponse.json();\r\n\r\n      if (routeData.routes.length === 0) {\r\n          alert(\"No route found!\");\r\n          return;\r\n      }\r\n\r\n      // Extract route coordinates\r\n      const routeCoords = routeData.routes[0].geometry.coordinates.map(coord => ({\r\n          lat: coord[1],\r\n          lng: coord[0]\r\n      }));\r\n\r\n      // Draw the route on the map\r\n      map.drawPolyline({\r\n          path: routeCoords,\r\n          strokeColor: \"#FF0000\",\r\n          strokeOpacity: 0.8,\r\n          strokeWeight: 5\r\n      });\r\n\r\n  } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      alert(\"Error fetching location or route. Please try again.\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAI,CAACC,WAAW,IAAI,CAACC,YAAY,EAAE;EAEnC,MAAMC,MAAM,GAAG,0DAA0D,CAAC,CAAC;;EAE3E;EACA,MAAMC,UAAU,GAAG,2DAA2DD,MAAM,SAASE,kBAAkB,CAACJ,WAAW,CAAC,EAAE;EAE9H,IAAI;IACA,MAAMK,eAAe,GAAG,MAAMC,KAAK,CAACH,UAAU,CAAC;IAC/C,MAAMI,WAAW,GAAG,MAAMF,eAAe,CAACG,IAAI,CAAC,CAAC;IAEhD,IAAID,WAAW,CAACE,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;MACnCC,KAAK,CAAC,uDAAuD,CAAC;MAC9D;IACJ;IAEA,MAAMC,OAAO,GAAGL,WAAW,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACI,QAAQ,CAACC,WAAW;IAC5D,MAAMC,OAAO,GAAGH,OAAO,CAAC,CAAC,CAAC;IAC1B,MAAMI,OAAO,GAAGJ,OAAO,CAAC,CAAC,CAAC;;IAE1B;IACAK,GAAG,CAACC,SAAS,CAAC;MACVC,GAAG,EAAEJ,OAAO;MACZK,GAAG,EAAEJ,OAAO;MACZK,KAAK,EAAE;IACX,CAAC,CAAC;;IAEF;IACA,MAAMC,QAAQ,GAAG,sEAAsEpB,MAAM,UAAUD,YAAY,CAACmB,GAAG,IAAInB,YAAY,CAACkB,GAAG,QAAQH,OAAO,IAAID,OAAO,EAAE;IAEvK,MAAMQ,aAAa,GAAG,MAAMjB,KAAK,CAACgB,QAAQ,CAAC;IAC3C,MAAME,SAAS,GAAG,MAAMD,aAAa,CAACf,IAAI,CAAC,CAAC;IAE5C,IAAIgB,SAAS,CAACC,MAAM,CAACf,MAAM,KAAK,CAAC,EAAE;MAC/BC,KAAK,CAAC,iBAAiB,CAAC;MACxB;IACJ;;IAEA;IACA,MAAMe,WAAW,GAAGF,SAAS,CAACC,MAAM,CAAC,CAAC,CAAC,CAACZ,QAAQ,CAACC,WAAW,CAACG,GAAG,CAACU,KAAK,KAAK;MACvER,GAAG,EAAEQ,KAAK,CAAC,CAAC,CAAC;MACbP,GAAG,EAAEO,KAAK,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;;IAEH;IACAV,GAAG,CAACW,YAAY,CAAC;MACbC,IAAI,EAAEH,WAAW;MACjBI,WAAW,EAAE,SAAS;MACtBC,aAAa,EAAE,GAAG;MAClBC,YAAY,EAAE;IAClB,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9BtB,KAAK,CAAC,qDAAqD,CAAC;EAChE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}