{"ast":null,"code":"import { LeafletProvider, addClassName, useLeafletContext } from '@react-leaflet/core';\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nconst DEFAULT_PANES = ['mapPane', 'markerPane', 'overlayPane', 'popupPane', 'shadowPane', 'tilePane', 'tooltipPane'];\nfunction omitPane(obj, pane) {\n  const {\n    [pane]: _p,\n    ...others\n  } = obj;\n  return others;\n}\nfunction createPane(props, context) {\n  const name = props.name;\n  if (DEFAULT_PANES.indexOf(name) !== -1) {\n    throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\n  }\n  if (context.map.getPane(name) != null) {\n    throw new Error(`A pane with this name already exists: ${name}`);\n  }\n  const parentPaneName = props.pane ?? context.pane;\n  const parentPane = parentPaneName ? context.map.getPane(parentPaneName) : undefined;\n  const element = context.map.createPane(name, parentPane);\n  if (props.className != null) {\n    addClassName(element, props.className);\n  }\n  if (props.style != null) {\n    Object.keys(props.style).forEach(key => {\n      // @ts-ignore\n      element.style[key] = props.style[key];\n    });\n  }\n  return element;\n}\nexport function Pane(props) {\n  const [paneElement, setPaneElement] = useState();\n  const context = useLeafletContext();\n  const newContext = useMemo(() => ({\n    ...context,\n    pane: props.name\n  }), [context]);\n  useEffect(() => {\n    setPaneElement(createPane(props, context));\n    return function removeCreatedPane() {\n      const pane = context.map.getPane(props.name);\n      pane == null ? void 0 : pane.remove == null ? void 0 : pane.remove(); // @ts-ignore map internals\n\n      if (context.map._panes != null) {\n        // @ts-ignore map internals\n        context.map._panes = omitPane(context.map._panes, props.name); // @ts-ignore map internals\n\n        context.map._paneRenderers = omitPane(\n        // @ts-ignore map internals\n        context.map._paneRenderers, props.name);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return props.children != null && paneElement != null ? /*#__PURE__*/createPortal(/*#__PURE__*/React.createElement(LeafletProvider, {\n    value: newContext\n  }, props.children), paneElement) : null;\n}","map":{"version":3,"names":["LeafletProvider","addClassName","useLeafletContext","React","useState","useEffect","useMemo","createPortal","DEFAULT_PANES","omitPane","obj","pane","_p","others","createPane","props","context","name","indexOf","Error","map","getPane","parentPaneName","parentPane","undefined","element","className","style","Object","keys","forEach","key","Pane","paneElement","setPaneElement","newContext","removeCreatedPane","remove","_panes","_paneRenderers","children","createElement","value"],"sources":["C:/Users/harsh/OneDrive - Amrita Vishwa Vidyapeetham/sem6/ds/Gmapsclone/frontend/node_modules/react-leaflet/esm/Pane.js"],"sourcesContent":["import { LeafletProvider, addClassName, useLeafletContext } from '@react-leaflet/core';\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nconst DEFAULT_PANES = ['mapPane', 'markerPane', 'overlayPane', 'popupPane', 'shadowPane', 'tilePane', 'tooltipPane'];\r\n\r\nfunction omitPane(obj, pane) {\r\n  const {\r\n    [pane]: _p,\r\n    ...others\r\n  } = obj;\r\n  return others;\r\n}\r\n\r\nfunction createPane(props, context) {\r\n  const name = props.name;\r\n\r\n  if (DEFAULT_PANES.indexOf(name) !== -1) {\r\n    throw new Error(`You must use a unique name for a pane that is not a default Leaflet pane: ${name}`);\r\n  }\r\n\r\n  if (context.map.getPane(name) != null) {\r\n    throw new Error(`A pane with this name already exists: ${name}`);\r\n  }\r\n\r\n  const parentPaneName = props.pane ?? context.pane;\r\n  const parentPane = parentPaneName ? context.map.getPane(parentPaneName) : undefined;\r\n  const element = context.map.createPane(name, parentPane);\r\n\r\n  if (props.className != null) {\r\n    addClassName(element, props.className);\r\n  }\r\n\r\n  if (props.style != null) {\r\n    Object.keys(props.style).forEach(key => {\r\n      // @ts-ignore\r\n      element.style[key] = props.style[key];\r\n    });\r\n  }\r\n\r\n  return element;\r\n}\r\n\r\nexport function Pane(props) {\r\n  const [paneElement, setPaneElement] = useState();\r\n  const context = useLeafletContext();\r\n  const newContext = useMemo(() => ({ ...context,\r\n    pane: props.name\r\n  }), [context]);\r\n  useEffect(() => {\r\n    setPaneElement(createPane(props, context));\r\n    return function removeCreatedPane() {\r\n      const pane = context.map.getPane(props.name);\r\n      pane == null ? void 0 : pane.remove == null ? void 0 : pane.remove(); // @ts-ignore map internals\r\n\r\n      if (context.map._panes != null) {\r\n        // @ts-ignore map internals\r\n        context.map._panes = omitPane(context.map._panes, props.name); // @ts-ignore map internals\r\n\r\n        context.map._paneRenderers = omitPane( // @ts-ignore map internals\r\n        context.map._paneRenderers, props.name);\r\n      }\r\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  return props.children != null && paneElement != null ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(LeafletProvider, {\r\n    value: newContext\r\n  }, props.children), paneElement) : null;\r\n}"],"mappings":"AAAA,SAASA,eAAe,EAAEC,YAAY,EAAEC,iBAAiB,QAAQ,qBAAqB;AACtF,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,SAASC,YAAY,QAAQ,WAAW;AACxC,MAAMC,aAAa,GAAG,CAAC,SAAS,EAAE,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,aAAa,CAAC;AAEpH,SAASC,QAAQA,CAACC,GAAG,EAAEC,IAAI,EAAE;EAC3B,MAAM;IACJ,CAACA,IAAI,GAAGC,EAAE;IACV,GAAGC;EACL,CAAC,GAAGH,GAAG;EACP,OAAOG,MAAM;AACf;AAEA,SAASC,UAAUA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAClC,MAAMC,IAAI,GAAGF,KAAK,CAACE,IAAI;EAEvB,IAAIT,aAAa,CAACU,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IACtC,MAAM,IAAIE,KAAK,CAAC,6EAA6EF,IAAI,EAAE,CAAC;EACtG;EAEA,IAAID,OAAO,CAACI,GAAG,CAACC,OAAO,CAACJ,IAAI,CAAC,IAAI,IAAI,EAAE;IACrC,MAAM,IAAIE,KAAK,CAAC,yCAAyCF,IAAI,EAAE,CAAC;EAClE;EAEA,MAAMK,cAAc,GAAGP,KAAK,CAACJ,IAAI,IAAIK,OAAO,CAACL,IAAI;EACjD,MAAMY,UAAU,GAAGD,cAAc,GAAGN,OAAO,CAACI,GAAG,CAACC,OAAO,CAACC,cAAc,CAAC,GAAGE,SAAS;EACnF,MAAMC,OAAO,GAAGT,OAAO,CAACI,GAAG,CAACN,UAAU,CAACG,IAAI,EAAEM,UAAU,CAAC;EAExD,IAAIR,KAAK,CAACW,SAAS,IAAI,IAAI,EAAE;IAC3BzB,YAAY,CAACwB,OAAO,EAAEV,KAAK,CAACW,SAAS,CAAC;EACxC;EAEA,IAAIX,KAAK,CAACY,KAAK,IAAI,IAAI,EAAE;IACvBC,MAAM,CAACC,IAAI,CAACd,KAAK,CAACY,KAAK,CAAC,CAACG,OAAO,CAACC,GAAG,IAAI;MACtC;MACAN,OAAO,CAACE,KAAK,CAACI,GAAG,CAAC,GAAGhB,KAAK,CAACY,KAAK,CAACI,GAAG,CAAC;IACvC,CAAC,CAAC;EACJ;EAEA,OAAON,OAAO;AAChB;AAEA,OAAO,SAASO,IAAIA,CAACjB,KAAK,EAAE;EAC1B,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAC,CAAC;EAChD,MAAMY,OAAO,GAAGd,iBAAiB,CAAC,CAAC;EACnC,MAAMiC,UAAU,GAAG7B,OAAO,CAAC,OAAO;IAAE,GAAGU,OAAO;IAC5CL,IAAI,EAAEI,KAAK,CAACE;EACd,CAAC,CAAC,EAAE,CAACD,OAAO,CAAC,CAAC;EACdX,SAAS,CAAC,MAAM;IACd6B,cAAc,CAACpB,UAAU,CAACC,KAAK,EAAEC,OAAO,CAAC,CAAC;IAC1C,OAAO,SAASoB,iBAAiBA,CAAA,EAAG;MAClC,MAAMzB,IAAI,GAAGK,OAAO,CAACI,GAAG,CAACC,OAAO,CAACN,KAAK,CAACE,IAAI,CAAC;MAC5CN,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,IAAI,CAAC0B,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG1B,IAAI,CAAC0B,MAAM,CAAC,CAAC,CAAC,CAAC;;MAEtE,IAAIrB,OAAO,CAACI,GAAG,CAACkB,MAAM,IAAI,IAAI,EAAE;QAC9B;QACAtB,OAAO,CAACI,GAAG,CAACkB,MAAM,GAAG7B,QAAQ,CAACO,OAAO,CAACI,GAAG,CAACkB,MAAM,EAAEvB,KAAK,CAACE,IAAI,CAAC,CAAC,CAAC;;QAE/DD,OAAO,CAACI,GAAG,CAACmB,cAAc,GAAG9B,QAAQ;QAAE;QACvCO,OAAO,CAACI,GAAG,CAACmB,cAAc,EAAExB,KAAK,CAACE,IAAI,CAAC;MACzC;IACF,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACN,OAAOF,KAAK,CAACyB,QAAQ,IAAI,IAAI,IAAIP,WAAW,IAAI,IAAI,GAAG,aAAa1B,YAAY,CAAE,aAAaJ,KAAK,CAACsC,aAAa,CAACzC,eAAe,EAAE;IAClI0C,KAAK,EAAEP;EACT,CAAC,EAAEpB,KAAK,CAACyB,QAAQ,CAAC,EAAEP,WAAW,CAAC,GAAG,IAAI;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}