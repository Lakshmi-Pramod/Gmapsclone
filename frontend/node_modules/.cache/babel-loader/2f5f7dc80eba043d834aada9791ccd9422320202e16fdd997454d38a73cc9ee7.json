{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\megha\\\\OneDrive\\\\Documents\\\\GitHub\\\\Gmapsclone\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport GMaps from \"gmaps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [destination, setDestination] = useState(\"\"); // User's input destination\n  const [userLocation, setUserLocation] = useState(null); // User's current location\n  const [map, setMap] = useState(null); // Map instance\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const lat = position.coords.latitude;\n        const lng = position.coords.longitude;\n        setUserLocation({\n          lat,\n          lng\n        });\n\n        // Initialize GMaps with user's location\n        const newMap = new GMaps({\n          div: \"#map\",\n          lat,\n          lng,\n          zoom: 13\n        });\n\n        // Add a marker for the user's current location\n        newMap.addMarker({\n          lat,\n          lng,\n          title: \"Your Location\",\n          icon: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\" // Blue marker for user location\n        });\n        setMap(newMap);\n      });\n    } else {\n      alert(\"Geolocation is not supported by this browser.\");\n    }\n  }, []);\n  const handleSearch = async () => {\n    if (!destination || !userLocation || !map) {\n      alert(\"Waiting for location or map to load...\");\n      return;\n    }\n    const apiKey = \"YOUR_OPENROUTESERVICE_API_KEY\"; // ðŸ”´ Replace with your actual API key\n\n    // Step 1: Convert place name to coordinates using OpenRouteService Geocoding API\n    const geocodeUrl = `https://api.openrouteservice.org/geocode/search?api_key=${apiKey}&text=${encodeURIComponent(destination)}`;\n    try {\n      const geocodeResponse = await fetch(geocodeUrl);\n      const geocodeData = await geocodeResponse.json();\n      if (geocodeData.features.length === 0) {\n        alert(\"Location not found! Please enter a valid destination.\");\n        return;\n      }\n      const destLoc = geocodeData.features[0].geometry.coordinates;\n      const destLat = destLoc[1];\n      const destLng = destLoc[0];\n\n      // Add marker for the destination\n      map.addMarker({\n        lat: destLat,\n        lng: destLng,\n        title: \"Destination\",\n        icon: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\" // Red marker for destination\n      });\n\n      // Step 2: Get the shortest route from userLocation to destination\n      const routeUrl = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${userLocation.lng},${userLocation.lat}&end=${destLng},${destLat}`;\n      const routeResponse = await fetch(routeUrl);\n      const routeData = await routeResponse.json();\n      if (routeData.routes.length === 0) {\n        alert(\"No route found!\");\n        return;\n      }\n\n      // Extract route coordinates\n      const routeCoords = routeData.routes[0].geometry.coordinates.map(coord => ({\n        lat: coord[1],\n        lng: coord[0]\n      }));\n\n      // Draw the route on the map\n      map.drawPolyline({\n        path: routeCoords,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 0.8,\n        strokeWeight: 5\n      });\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(\"Error fetching location or route. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Google Maps Clone (Using GMaps & OpenRouteService)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter destination\",\n      value: destination,\n      onChange: e => setDestination(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search Route\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"h/iSl4+/WoU0/p9dA7kLUcUxKoY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","GMaps","jsxDEV","_jsxDEV","App","_s","destination","setDestination","userLocation","setUserLocation","map","setMap","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","newMap","div","zoom","addMarker","title","icon","alert","handleSearch","apiKey","geocodeUrl","encodeURIComponent","geocodeResponse","fetch","geocodeData","json","features","length","destLoc","geometry","coordinates","destLat","destLng","routeUrl","routeResponse","routeData","routes","routeCoords","coord","drawPolyline","path","strokeColor","strokeOpacity","strokeWeight","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","id","style","width","height","_c","$RefreshReg$"],"sources":["C:/Users/megha/OneDrive/Documents/GitHub/Gmapsclone/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport GMaps from \"gmaps\";\r\n\r\nconst App = () => {\r\n    const [destination, setDestination] = useState(\"\"); // User's input destination\r\n    const [userLocation, setUserLocation] = useState(null); // User's current location\r\n    const [map, setMap] = useState(null); // Map instance\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const lat = position.coords.latitude;\r\n                const lng = position.coords.longitude;\r\n\r\n                setUserLocation({ lat, lng });\r\n\r\n                // Initialize GMaps with user's location\r\n                const newMap = new GMaps({\r\n                    div: \"#map\",\r\n                    lat,\r\n                    lng,\r\n                    zoom: 13,\r\n                });\r\n\r\n                // Add a marker for the user's current location\r\n                newMap.addMarker({\r\n                    lat,\r\n                    lng,\r\n                    title: \"Your Location\",\r\n                    icon: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\", // Blue marker for user location\r\n                });\r\n\r\n                setMap(newMap);\r\n            });\r\n        } else {\r\n            alert(\"Geolocation is not supported by this browser.\");\r\n        }\r\n    }, []);\r\n\r\n    const handleSearch = async () => {\r\n        if (!destination || !userLocation || !map) {\r\n            alert(\"Waiting for location or map to load...\");\r\n            return;\r\n        }\r\n\r\n        const apiKey = \"YOUR_OPENROUTESERVICE_API_KEY\"; // ðŸ”´ Replace with your actual API key\r\n\r\n        // Step 1: Convert place name to coordinates using OpenRouteService Geocoding API\r\n        const geocodeUrl = `https://api.openrouteservice.org/geocode/search?api_key=${apiKey}&text=${encodeURIComponent(destination)}`;\r\n\r\n        try {\r\n            const geocodeResponse = await fetch(geocodeUrl);\r\n            const geocodeData = await geocodeResponse.json();\r\n\r\n            if (geocodeData.features.length === 0) {\r\n                alert(\"Location not found! Please enter a valid destination.\");\r\n                return;\r\n            }\r\n\r\n            const destLoc = geocodeData.features[0].geometry.coordinates;\r\n            const destLat = destLoc[1];\r\n            const destLng = destLoc[0];\r\n\r\n            // Add marker for the destination\r\n            map.addMarker({\r\n                lat: destLat,\r\n                lng: destLng,\r\n                title: \"Destination\",\r\n                icon: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\", // Red marker for destination\r\n            });\r\n\r\n            // Step 2: Get the shortest route from userLocation to destination\r\n            const routeUrl = `https://api.openrouteservice.org/v2/directions/driving-car?api_key=${apiKey}&start=${userLocation.lng},${userLocation.lat}&end=${destLng},${destLat}`;\r\n\r\n            const routeResponse = await fetch(routeUrl);\r\n            const routeData = await routeResponse.json();\r\n\r\n            if (routeData.routes.length === 0) {\r\n                alert(\"No route found!\");\r\n                return;\r\n            }\r\n\r\n            // Extract route coordinates\r\n            const routeCoords = routeData.routes[0].geometry.coordinates.map(coord => ({\r\n                lat: coord[1],\r\n                lng: coord[0]\r\n            }));\r\n\r\n            // Draw the route on the map\r\n            map.drawPolyline({\r\n                path: routeCoords,\r\n                strokeColor: \"#FF0000\",\r\n                strokeOpacity: 0.8,\r\n                strokeWeight: 5\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            alert(\"Error fetching location or route. Please try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Google Maps Clone (Using GMaps & OpenRouteService)</h1>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter destination\"\r\n                value={destination}\r\n                onChange={(e) => setDestination(e.target.value)}\r\n            />\r\n            <button onClick={handleSearch}>Search Route</button>\r\n            <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}