{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\megha\\\\OneDrive\\\\Documents\\\\GitHub\\\\Gmapsclone\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport io from \"socket.io-client\";\nimport \"leaflet/dist/leaflet.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://127.0.0.1:5000\"); // Connect to Flask WebSockets\n\nconst App = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  const [otherUsers, setOtherUsers] = useState({});\n\n  // Get user location on load\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setUserLocation({\n        lat: latitude,\n        lng: longitude\n      });\n\n      // Send location to server\n      socket.emit(\"update_location\", {\n        user_id: \"user123\",\n        lat: latitude,\n        lng: longitude\n      });\n    });\n\n    // Listen for location updates\n    socket.on(\"location_update\", locations => {\n      setOtherUsers(locations);\n    });\n    return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Google Maps Clone (Leaflet.js + Flask)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [51.505, -0.09],\n      zoom: 13,\n      style: {\n        height: \"80vh\",\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [userLocation.lat, userLocation.lng],\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"You are here!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), Object.entries(otherUsers).map(([userId, location]) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [location.lat, location.lng],\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [\"User \", userId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, userId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"kNBHUK1HJaV1MD1nI0f7LCx/2Rw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","io","jsxDEV","_jsxDEV","socket","App","_s","userLocation","setUserLocation","otherUsers","setOtherUsers","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lng","emit","user_id","on","locations","disconnect","children","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","url","Object","entries","map","userId","location","_c","$RefreshReg$"],"sources":["C:/Users/megha/OneDrive/Documents/GitHub/Gmapsclone/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport io from \"socket.io-client\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nconst socket = io(\"http://127.0.0.1:5000\"); // Connect to Flask WebSockets\r\n\r\nconst App = () => {\r\n  const [userLocation, setUserLocation] = useState(null);\r\n  const [otherUsers, setOtherUsers] = useState({});\r\n\r\n  // Get user location on load\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const { latitude, longitude } = position.coords;\r\n      setUserLocation({ lat: latitude, lng: longitude });\r\n\r\n      // Send location to server\r\n      socket.emit(\"update_location\", { user_id: \"user123\", lat: latitude, lng: longitude });\r\n    });\r\n\r\n    // Listen for location updates\r\n    socket.on(\"location_update\", (locations) => {\r\n      setOtherUsers(locations);\r\n    });\r\n\r\n    return () => socket.disconnect();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Google Maps Clone (Leaflet.js + Flask)</h2>\r\n      <MapContainer center={[51.505, -0.09]} zoom={13} style={{ height: \"80vh\", width: \"100%\" }}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        \r\n        {userLocation && (\r\n          <Marker position={[userLocation.lat, userLocation.lng]}>\r\n            <Popup>You are here!</Popup>\r\n          </Marker>\r\n        )}\r\n\r\n        {Object.entries(otherUsers).map(([userId, location]) => (\r\n          <Marker key={userId} position={[location.lat, location.lng]}>\r\n            <Popup>User {userId}</Popup>\r\n          </Marker>\r\n        ))}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}